# Generated by Otto, do not edit manually

variable "infra_id" {}
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "aws_region" {}
variable "key_name" {}

variable "ami" { default = "ami-21630d44" }
variable "instance_type" { default = "t2.micro" }
variable "private_subnet_id" {}
variable "public_subnet_id" {}
variable "vpc_cidr" {}
variable "vpc_id" {}

variable "bastion_host" {}
variable "bastion_user" {}

provider "aws" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region     = "${var.aws_region}"
}

resource "aws_security_group" "app" {
  name   = "{{ name }}-${var.infra_id}"
  vpc_id = "${var.vpc_id}"

  ingress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["${var.vpc_cidr}"]
  }
  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Deploy a set of instances
resource "aws_instance" "app" {
  ami           = "${var.ami}"
  instance_type = "${var.instance_type}"
  subnet_id     = "${var.private_subnet_id}"
  key_name      = "${var.key_name}"
  user_data     = "${file("${path.module}/cloud-init.sh")}"

  vpc_security_group_ids = ["${aws_security_group.app.id}"]

  tags {
    Name = "{{ name }}"
  }

  connection {
    user         = "ubuntu"
    host         = "${self.private_ip}"
    bastion_host = "${var.bastion_host}"
    bastion_user = "${var.bastion_user}"
  }

  # Wait for cloud-init (ensures instance is fully booted before moving on)
  provisioner "remote-exec" {
    inline = ["while sudo pkill -0 cloud-init 2>/dev/null; do sleep 2; done"]
  }

  {% for dir in foundation_dirs.build %}
  # Foundation {{ forloop.Counter }} (build)
  provisioner "remote-exec" {
    inline = ["mkdir -p /tmp/otto/foundation-{{ forloop.Counter }}"]
  }

  provisioner "file" {
    source = "{{ dir }}/"
    destination = "/tmp/otto/foundation-{{ forloop.Counter }}"
  }

  provisioner "remote-exec" {
    inline = ["cd /tmp/otto/foundation-{{ forloop.Counter}} && bash ./main.sh"]
  }
  {% endfor %}

  {% for dir in foundation_dirs.deploy %}
  # Foundation {{ forloop.Counter }} (deploy)
  provisioner "remote-exec" {
    inline = ["mkdir -p /tmp/otto/foundation-deploy-{{ forloop.Counter }}"]
  }

  provisioner "file" {
    source = "{{ dir }}/"
    destination = "/tmp/otto/foundation-deploy-{{ forloop.Counter }}"
  }

  provisioner "remote-exec" {
    inline = ["cd /tmp/otto/foundation-deploy-{{ forloop.Counter}} && bash ./main.sh"]
  }
  {% endfor %}

  # Remove any temporary directories we made from foundations (if any)
  provisioner "remote-exec" {
    inline = ["rm -rf /tmp/otto"]
  }
}

output "ip" {
  value = "${aws_instance.app.private_ip}"
}
