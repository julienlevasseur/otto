# Generated by Otto, do not edit manually

variable "infra_id" {}
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "aws_region" {}
variable "key_name" {}

variable "ami" {}
variable "instance_type" { default = "t2.micro" }
variable "private_subnet_id" {}
variable "public_subnet_id" {}
variable "vpc_cidr" {}
variable "vpc_id" {}

provider "aws" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region     = "${var.aws_region}"
}

resource "aws_security_group" "elb" {
  name = "{{ name }}-elb-${var.infra_id}"
  vpc_id = "${var.vpc_id}"

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "app" {
  name   = "{{ name }}-${var.infra_id}"
  vpc_id = "${var.vpc_id}"

  ingress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["${var.vpc_cidr}"]
  }
  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_elb" "app" {
  name            = "{{ name }}-${var.infra_id}"
  subnets         = ["${var.public_subnet_id}"]
  security_groups = ["${aws_security_group.elb.id}"]
  instances       = ["${aws_instance.app.*.id}"]

  # TODO: make listening ports configurable
  listener {
    lb_port           = 80
    lb_protocol       = "tcp"
    instance_port     = 80
    instance_protocol = "tcp"
  }
}

# Deploy a set of instances
resource "aws_instance" "app" {
  ami           = "${var.ami}"
  instance_type = "${var.instance_type}"
  subnet_id     = "${var.private_subnet_id}"
  key_name      = "${var.key_name}"

  vpc_security_group_ids = ["${aws_security_group.app.id}"]

  tags {
    Name = "{{ name }}"
  }
}

output "url" {
  value = "http://${aws_elb.app.dns_name}/"
}
